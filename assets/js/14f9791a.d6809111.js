"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[2465],{8453:(e,r,n)=>{n.d(r,{R:()=>d,x:()=>i});var a=n(6540);const t={},s=a.createContext(t);function d(e){const r=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),a.createElement(s.Provider,{value:r},e.children)}},9522:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>d,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"dataframe/index","title":"DataFrame","description":"Represents a matrix with names for each column. Data is stored as a row-major flattened array.","source":"@site/api/dataframe/index.md","sourceDirName":"dataframe","slug":"/dataframe/","permalink":"/ml-in-c/api/dataframe/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"DataFrame","description":"Represents a matrix with names for each column. Data is stored as a row-major flattened array.","keywords":["DataFrame","df","matrix","array","flattened"],"last_updated":"2025-09-14T00:00:00.000Z"},"sidebar":"apiSidebar","next":{"title":"DF_addColumn","permalink":"/ml-in-c/api/dataframe/DF_addColumn"}}');var t=n(4848),s=n(8453);const d={title:"DataFrame",description:"Represents a matrix with names for each column. Data is stored as a row-major flattened array.",keywords:["DataFrame","df","matrix","array","flattened"],last_updated:new Date("2025-09-14T00:00:00.000Z")},i=void 0,o={},c=[{value:"Struct Members",id:"struct-members",level:2},{value:"Related Functions",id:"related-functions",level:2}];function l(e){const r={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-c",children:"typedef struct {\n\tdouble *data;\n\tint numRows;\n\tint numCols;\n\tchar **featureNames;\n} DataFrame;\n"})}),"\n",(0,t.jsx)(r.p,{children:"Represents a matrix with names for each column."}),"\n",(0,t.jsx)(r.p,{children:"Data is stored as a row-major flattened array."}),"\n",(0,t.jsx)(r.admonition,{type:"note",children:(0,t.jsxs)(r.p,{children:["Added in version ",(0,t.jsx)(r.strong,{children:"0.0.0"})]})}),"\n",(0,t.jsx)(r.h2,{id:"struct-members",children:"Struct Members"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"double* data"})})," \u2190 ",(0,t.jsx)(r.em,{children:"Flattened array"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"int numRows"})})," \u2190 ",(0,t.jsx)(r.em,{children:"Number of rows (samples)"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"int numCols"})})," \u2190 ",(0,t.jsx)(r.em,{children:"Number of columns (features) per row"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"char** featureNames"})})," \u2190 ",(0,t.jsx)(r.em,{children:"Array of column/feature names"})]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"related-functions",children:"Related Functions"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"localhost:3000/ml-in-c/api/dataframe/DF_addColumn",children:(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"DF_addColumn"})})})," \u2192 ",(0,t.jsx)(r.code,{children:"int"}),(0,t.jsx)(r.br,{}),"\n",(0,t.jsx)(r.em,{children:"Adds a single column/feature to an existing DataFrame."}),(0,t.jsx)(r.br,{}),"\n",(0,t.jsx)(r.strong,{children:"Params"}),": ",(0,t.jsx)(r.code,{children:"DataFrame *df"})," ",(0,t.jsx)(r.code,{children:"double *data"})," ",(0,t.jsx)(r.code,{children:"char *name"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"localhost:3000/ml-in-c/api/dataframe/DF_free",children:(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"DF_free"})})})," \u2192 ",(0,t.jsx)(r.code,{children:"void"}),(0,t.jsx)(r.br,{}),"\n",(0,t.jsx)(r.em,{children:"Frees all allocated memory by the DataFrame."}),(0,t.jsx)(r.br,{}),"\n",(0,t.jsx)(r.strong,{children:"Params"}),": ",(0,t.jsx)(r.code,{children:"DataFrame *df"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"localhost:3000/ml-in-c/api/dataframe/DF_fromArray",children:(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"DF_fromArray"})})})," \u2192 ",(0,t.jsx)(r.code,{children:"DataFrame"}),(0,t.jsx)(r.br,{}),"\n",(0,t.jsx)(r.em,{children:"Creates a DataFrame with one feature from the given array."}),(0,t.jsx)(r.br,{}),"\n",(0,t.jsx)(r.strong,{children:"Params"}),": ",(0,t.jsx)(r.code,{children:"double *data"})," ",(0,t.jsx)(r.code,{children:"int numRows"})," ",(0,t.jsx)(r.code,{children:"char *name"})]}),"\n"]})]})}function m(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);