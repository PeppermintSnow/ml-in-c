"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[282],{7902:e=>{e.exports=JSON.parse('{"permalink":"/ml-in-c/blog/2025/09/10/implementing-a-dataframe-in-c","source":"@site/blog/2025-09-10-implementing-a-dataframe-in-c/index.mdx","title":"Implementing a DataFrame in C: Flattened Matrix vs. Traditional Matrix","description":"This article investigates the impact of memory layout on array traversal in the context of machine learning. A 1D array was compared against a 2D array, both representing a **1,000,000**$\\\\times$**100** matrix. **53,046** paired measurements were collected over the span of **6 hours**, which were used to analyze execution times and apply statistical hypothesis testing. Results show that the 1D array consistently outpaced the 2D array by **~0.002734 seconds** per traversal, revealing a highly statistically significant difference (**p-value** $<$ **1e-323**). When applied in real-world scenarios relating to deep learning, these small performance gains translate into massive long-term benefits, potentially amounting to hours. This article highlights the implications of memory layouts in computational efficiency relating to data science workflows.","date":"2025-09-10T00:00:00.000Z","tags":[{"inline":true,"label":"DataFrame","permalink":"/ml-in-c/blog/tags/data-frame"},{"inline":true,"label":"Performance","permalink":"/ml-in-c/blog/tags/performance"},{"inline":true,"label":"Arrays","permalink":"/ml-in-c/blog/tags/arrays"},{"inline":true,"label":"Benchmark","permalink":"/ml-in-c/blog/tags/benchmark"},{"inline":true,"label":"Design","permalink":"/ml-in-c/blog/tags/design"}],"readingTime":15.22,"hasTruncateMarker":true,"authors":[{"name":"PeppermintSnow","title":"DataCamp Associate Certified, Freelance Full-stack Developer, CS Undergrad","url":"https://github.com/peppermintsnow","socials":{"linkedin":"https://www.linkedin.com/in/gabriel-vicente-198326337/","github":"https://github.com/peppermintsnow"},"imageURL":"https://github.com/peppermintsnow.png","key":"PeppermintSnow","page":null}],"frontMatter":{"title":"Implementing a DataFrame in C: Flattened Matrix vs. Traditional Matrix","authors":"PeppermintSnow","date":"2025-09-10","tags":["DataFrame","Performance","Arrays","Benchmark","Design"],"description":"This article investigates the impact of memory layout on array traversal in the context of machine learning. A 1D array was compared against a 2D array, both representing a **1,000,000**$\\\\times$**100** matrix. **53,046** paired measurements were collected over the span of **6 hours**, which were used to analyze execution times and apply statistical hypothesis testing. Results show that the 1D array consistently outpaced the 2D array by **~0.002734 seconds** per traversal, revealing a highly statistically significant difference (**p-value** $<$ **1e-323**). When applied in real-world scenarios relating to deep learning, these small performance gains translate into massive long-term benefits, potentially amounting to hours. This article highlights the implications of memory layouts in computational efficiency relating to data science workflows."},"unlisted":false}')},8268:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>c});var n=t(7902),i=t(4848),s=t(8453);const r={title:"Implementing a DataFrame in C: Flattened Matrix vs. Traditional Matrix",authors:"PeppermintSnow",date:"2025-09-10",tags:["DataFrame","Performance","Arrays","Benchmark","Design"],description:"This article investigates the impact of memory layout on array traversal in the context of machine learning. A 1D array was compared against a 2D array, both representing a **1,000,000**$\times$**100** matrix. **53,046** paired measurements were collected over the span of **6 hours**, which were used to analyze execution times and apply statistical hypothesis testing. Results show that the 1D array consistently outpaced the 2D array by **~0.002734 seconds** per traversal, revealing a highly statistically significant difference (**p-value** $<$ **1e-323**). When applied in real-world scenarios relating to deep learning, these small performance gains translate into massive long-term benefits, potentially amounting to hours. This article highlights the implications of memory layouts in computational efficiency relating to data science workflows."},l=void 0,o={authorsImageUrls:[void 0]},c=[{value:"Abstract",id:"abstract",level:2}];function m(e){const a={annotation:"annotation",h2:"h2",math:"math",mo:"mo",mrow:"mrow",p:"p",semantics:"semantics",span:"span",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.h2,{id:"abstract",children:"Abstract"}),"\n",(0,i.jsxs)(a.p,{children:["This article investigates the impact of memory layout on array traversal in the context of machine learning. A 1D array was compared against a 2D array, both representing a ",(0,i.jsx)(a.strong,{children:"1,000,000"}),(0,i.jsxs)(a.span,{className:"katex",children:[(0,i.jsx)(a.span,{className:"katex-mathml",children:(0,i.jsx)(a.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(a.semantics,{children:[(0,i.jsx)(a.mrow,{children:(0,i.jsx)(a.mo,{children:"\xd7"})}),(0,i.jsx)(a.annotation,{encoding:"application/x-tex",children:"\\times"})]})})}),(0,i.jsx)(a.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(a.span,{className:"base",children:[(0,i.jsx)(a.span,{className:"strut",style:{height:"0.6667em",verticalAlign:"-0.0833em"}}),(0,i.jsx)(a.span,{className:"mord",children:"\xd7"})]})})]}),(0,i.jsx)(a.strong,{children:"100"})," matrix. ",(0,i.jsx)(a.strong,{children:"53,046"})," paired measurements were collected over the span of ",(0,i.jsx)(a.strong,{children:"6 hours"}),", which were used to analyze execution times and apply statistical hypothesis testing. Results show that the 1D array consistently outpaced the 2D array by ",(0,i.jsx)(a.strong,{children:"~0.002734 seconds"})," per traversal, revealing a highly statistically significant difference (",(0,i.jsx)(a.strong,{children:"p-value"})," ",(0,i.jsxs)(a.span,{className:"katex",children:[(0,i.jsx)(a.span,{className:"katex-mathml",children:(0,i.jsx)(a.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(a.semantics,{children:[(0,i.jsx)(a.mrow,{children:(0,i.jsx)(a.mo,{children:"<"})}),(0,i.jsx)(a.annotation,{encoding:"application/x-tex",children:"<"})]})})}),(0,i.jsx)(a.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(a.span,{className:"base",children:[(0,i.jsx)(a.span,{className:"strut",style:{height:"0.5782em",verticalAlign:"-0.0391em"}}),(0,i.jsx)(a.span,{className:"mrel",children:"<"})]})})]})," ",(0,i.jsx)(a.strong,{children:"1e-323"}),"). When applied in real-world scenarios relating to deep learning, these small performance gains translate into massive long-term benefits, potentially amounting to hours. This article highlights the implications of memory layouts in computational efficiency relating to data science workflows."]})]})}function h(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},8453:(e,a,t)=>{t.d(a,{R:()=>r,x:()=>l});var n=t(6540);const i={},s=n.createContext(i);function r(e){const a=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(s.Provider,{value:a},e.children)}}}]);